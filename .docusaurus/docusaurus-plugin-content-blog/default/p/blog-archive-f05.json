{"archive":{"blogPosts":[{"id":"/2026/logrotate","metadata":{"permalink":"/blog/2026/logrotate","editUrl":"https://github.com/shouji1128955/bookshell/tree/main/blog/blog/2026/logrotate.md","source":"@site/blog/2026/logrotate.md","title":"2026/logrotate","description":"最近發現在 Ubuntu 的設備上只要是 /var/log/*.log 的檔案跑 logrotate 都會失敗，但是 CentOS 的系統反而沒問題","date":"2025-03-01T16:35:24.000Z","tags":[],"readingTime":0.995,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"nextItem":{"title":"npm常用命令","permalink":"/blog/2024/10/11/npm操作"}},"content":"最近發現在 Ubuntu 的設備上只要是 /var/log/*.log 的檔案跑 logrotate 都會失敗，但是 CentOS 的系統反而沒問題 \n出現的訊息是：\n\nerror: skipping “/var/log/syslog” because parent directory has insecure permissions (It’s world writable or writable by group which is not “root”) Set “su” directive in config file to tell logrotate which user/group should be used for rotation.\n\n但是執行 logrotate 的是 root，所以權限沒問題，問題是在於 logrotate 的安全性設計。\n\nCentOS 在 /var/log 預設是 root:root 權限\nUbuntu 在 /var/log 預設是 root:syslog 權限\n但是 logrotate 預設的安全性設計並不允許除了 root:root 以外的權限，如果權限非 root 就必須指定 su 參數讓 logrotate 不去判斷這個問題。\n\n最簡單就是在 logrotate.conf 加上 su 設定\n\n\n```shell\n\n# /etc/logrotate.conf\ncompress\ncreate\ndateext\nrotate 4\nweekly\nsu root root\n\n# configurable file rotations\ninclude /etc/logrotate.d\n```"},{"id":"/2024/10/11/npm操作","metadata":{"permalink":"/blog/2024/10/11/npm操作","editUrl":"https://github.com/shouji1128955/bookshell/tree/main/blog/blog/2024/10-11-npm操作.md","source":"@site/blog/2024/10-11-npm操作.md","title":"npm常用命令","description":"简介","date":"2024-10-11T00:00:00.000Z","tags":[],"readingTime":5.08,"hasTruncateMarker":true,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"2026/logrotate","permalink":"/blog/2026/logrotate"},"nextItem":{"title":"mongodb数据库恢复","permalink":"/blog/2023/12/19/mongodb数据库恢复"}},"content":"## 简介\r\n\r\n<!--truncate-->\r\nnpm是跟随node一起安装的包（模块）管理器。常见的使用场景有以下几种：\r\n\r\n* 允许用户从npm服务器下载别人编写的第三方包到本地使用。\r\n* 允许用户从npm服务器下载并安装别人编写的命令行程序到本地使用。\r\n* 允许用户将自己编写的包或命令行程序上传到npm服务器供别人使用。\r\n\r\n<!-- more -->s\r\n## 常用命令\r\n\r\n#### 检测是否安装及版本\r\n\r\n```sh\r\nnpm -v # 显示版本号说明已经安装相应的版本\r\n```\r\n\r\n#### 生成package.json文件\r\n\r\n```sh\r\nnpm init\r\n```\r\n\r\n> package.json用来描述项目中用到的模块和其他信息\r\n\r\n#### 安装模块\r\n\r\n```sh\r\nnpm install # 安装package.json定义好的模块，简写 npm i\r\n\r\n# 安装包指定模块\r\nnpm i <ModuleName>\r\n\r\n# 全局安装\r\nnpm i <ModuleName> -g\r\n\r\n# 安装包的同时，将信息写入到package.json中的 dependencies 配置中\r\nnpm i <ModuleName> --save\r\n\r\n# 安装包的同时，将信息写入到package.json中的 devDependencies 配置中\r\nnpm i <ModuleName> --save-dev\r\n\r\n# 安装多模块\r\nnpm i <ModuleName1> <ModuleName2>\r\n\r\n# 安装方式参数：\r\n-save # 简写-S，加入到生产依赖中\r\n-save-dev # 简写-D，加入到开发依赖中\r\n-g # 全局安装 将安装包放在 /usr/local 下或者你 node 的安装目录\r\n```\r\n\r\n#### 查看\r\n\r\n```sh\r\n# 查看所有全局安装的包\r\nnpm ls -g\r\n\r\n# 查看本地项目中安装的包\r\nnpm ls\r\n\r\n# 查看包的 package.json文件\r\nnpm view <ModuleName>\r\n\r\n# 查看包的依赖关系\r\nnpm view <ModuleName> dependencies\r\n\r\n# 查看包的源文件地址\r\nnpm view <ModuleName> repository.url\r\n\r\n# 查看包所依赖的node版本\r\nnpm view <ModuleName> engines\r\n\r\n# 查看帮助\r\nnpm help\r\n```\r\n\r\n#### 更新模块\r\n\r\n```sh\r\n# 更新本地模块\r\nnpm update <ModuleName>\r\n\r\n# 更新全局模块\r\nnpm update -g <ModuleName> # 更新全局软件包。\r\nnpm update -g # 更新所有的全局软件包。\r\nnpm outdated -g --depth=0 # 找出需要更新的包。\r\n```\r\n\r\n#### 卸载模块\r\n\r\n```sh\r\n# 卸载本地模块\r\nnpm uninstall <ModuleName>\r\n\r\n# 卸载全局模块\r\nnpm uninstall -g <ModuleName> # 卸载全局软件包。\r\n```\r\n\r\n#### 清空缓存\r\n\r\n```sh\r\n# 清空npm缓存\r\nnpm cache clear\r\n```\r\n\r\n#### 使用淘宝镜像\r\n\r\n```sh\r\n# 使用淘宝镜像\r\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\r\n```\r\n\r\n#### 其他\r\n\r\n```sh\r\n# 更改包内容后进行重建\r\nnpm rebuild <ModuleName>\r\n\r\n# 检查包是否已经过时，此命令会列出所有已经过时的包，可以及时进行包的更新\r\nnpm outdated\r\n\r\n# 访问npm的json文件，此命令将会打开一个网页\r\nnpm help json\r\n\r\n# 发布一个包的时候，需要检验某个包名是否存在\r\nnpm search <ModuleName>\r\n\r\n# 撤销自己发布过的某个版本代码\r\nnpm unpublish <package> <version>\r\n```\r\n\r\n\r\n\r\n## 使用技巧\r\n\r\n#### 多次安装不成功尝试先清除缓存\r\n\r\n```sh\r\nnpm cache clean -f\r\n```\r\n\r\n\r\n\r\n#### 查看已安装的依赖包版本号\r\n\r\n```sh\r\nnpm ls <ModuleName>\r\n```\r\n\r\n> 注意：用此方法才能准确的知道项目使用的版本号，查看package.json时，有“^\" 符号表示大于此版本\r\n\r\n\r\n\r\n## npm发布包教程\r\n\r\n[npm发布包教程](https://segmentfault.com/a/1190000017461666)\r\n## nrm的作用与使用\r\n\r\n#### nrm是什么？\r\n\r\nnrm(npm registry manager )是npm的镜像源管理工具，有时候国外资源太慢，使用这个就可以快速地在 npm 源间切换\r\n\r\n\r\n\r\n#### nrm的安装\r\n\r\n```sh\r\nnpm install -g nrm\r\n```\r\n\r\n\r\n\r\n#### nrm命令\r\n\r\n```sh\r\nnrm ls　#查看可用的源（有*号的表示当前所使用的源,以下<registry>表示源的名称）\r\nnrm use <registry> # 将npm下载源切换成指定的源\r\nnrm add <registry> <url> # 添加源，url为源的路径\r\nnrm del <registry> # 删除源\r\nnrm test <registry> # 测试源的响应时间，可以作为使用哪个源的参考\r\n\r\nnrm help　# 查看nrm帮助\r\nnrm home <registry>　# 跳转到指定源的官网\r\n```\r\n\r\n\r\n\r\n#### nrm使用\r\n\r\n如果在你的网络不太理想或者受到其他网络限制导致不能使用npm原本的源进行下载时，nrm就非常有用了，你只需要：\r\n\r\n```sh\r\nnrm ls # 查看可用的源\r\nnrm use <registry>　# 切换到指定源\r\n```"},{"id":"/2023/12/19/mongodb数据库恢复","metadata":{"permalink":"/blog/2023/12/19/mongodb数据库恢复","editUrl":"https://github.com/shouji1128955/bookshell/tree/main/blog/blog/2023/12-19mongodb数据库恢复.md","source":"@site/blog/2023/12-19mongodb数据库恢复.md","title":"mongodb数据库恢复","description":"分析问题现状","date":"2023-12-19T00:00:00.000Z","tags":[],"readingTime":7.98,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"npm常用命令","permalink":"/blog/2024/10/11/npm操作"},"nextItem":{"title":"config-docusaurus-v2","permalink":"/blog/config-docusaurus-v2"}},"content":"## 分析问题现状\r\nmongo版本： 3.2.17\r\n\r\n故障， 服务器宕机之后，重启mongdb会报错，因为是生产环境，所有的配置都是固定的，多次修改配置无效之后，决定将文件系统数据同步到测试环境实现验证\r\n\r\n![image-20231219193404022](images/image-20231219193404022.png)\r\n\r\n报错提示：  72 Requested option conflicts with current storage engine option for directoryForIndexes; you requested false but the current server storage is already set to true and cannot be changed, terminating \r\n\r\n原因：   使用directoryForIndexes`选项与您当前的数据布局冲突且无法更改：因为server启动的时候请求的为false,但是本地数据默认设置为true. \r\n\r\n因为是在容器中，生产环境我尽量保证数据不被损坏。然后下面导入到新环境\r\n\r\n\r\n\r\n新的解决方案就是尝试修复数据，我们需要将生产的文件系统数据先备份然后导出\r\n\r\n\r\n\r\n## 部署mongodb\r\n\r\n### yum 方式\r\n\r\n```shell\r\nsudo tee /etc/yum.repos.d/mongodb-org-3.2.repo <<EOF\r\n[mongodb-org-3.2]\r\nname=MongoDB Repository\r\nbaseurl=https://repo.mongodb.org/yum/redhat/\\$releasever/mongodb-org/3.2/x86_64/\r\ngpgcheck=1\r\nenabled=1\r\ngpgkey=https://www.mongodb.org/static/pgp/server-3.2.asc\r\nEOF\r\n```\r\n\r\n安装MongoDB：\r\n\r\n```shell\r\nsudo yum install -y mongodb-org\r\n```\r\n\r\n\r\n\r\n1. 上述命令将安装MongoDB包及其相关工具。\r\n2. 启动MongoDB服务\r\n\r\n```shell\r\nsudo systemctl start mongod\r\n```\r\n\r\n\r\n\r\n### 二进制方式\r\n\r\n官网下载地址：`https://www.mongodb.com/try/download/community`\r\n\r\n```shell\r\nwget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.2.17.tgz\r\n\r\ntar xf mongodb-linux-x86_64-3.2.17.tgz\r\nmv  mongodb-linux-x86_64-3.2.17 /usr/local/mongodb\r\n\r\n```\r\n\r\n创建数据与日志存放目录\r\n\r\n```shell\r\nmkdir  /usr/local/mongodb/data\r\nmkdir /usr/local/mongodb/logs\r\n```\r\n\r\n\r\n\r\n```shell\r\necho 'export PATH=$PATH:/usr/local/mongodb/bin' >>/etc/profile\r\nsource  /etc/profile\r\n#测试\r\nroot@smart:/usr/local/mongodb# mongo -version\r\nMongoDB shell version: 3.2.17\r\nroot@smart:/usr/local/mongodb#\r\n```\r\n\r\n\r\n\r\n创建配置文件mongodb.conf\r\n\r\n这里直接拷贝yum方式部署之后的文件\r\n\r\n```shell\r\n[root@clickhouse001 ~]# cat /etc/mongod.conf \r\n# mongod.conf\r\n\r\n# for documentation of all options, see:\r\n#   http://docs.mongodb.org/manual/reference/configuration-options/\r\n\r\n# where to write logging data.\r\nsystemLog:\r\n  destination: file\r\n  logAppend: true\r\n  path: /var/log/mongodb/mongod.log\r\n\r\n# Where and how to store data.\r\nstorage:\r\n  dbPath: /var/lib/mongo\r\n  journal:\r\n    enabled: true\r\n#  engine:\r\n#  mmapv1:\r\n#  wiredTiger:\r\n\r\n# how the process runs\r\nprocessManagement:\r\n  fork: true  # fork and run in background\r\n  pidFilePath: /var/run/mongodb/mongod.pid  # location of pidfile\r\n\r\n# network interfaces\r\nnet:\r\n  port: 27017\r\n  bindIp: 127.0.0.1  # Listen to local interface only, comment to listen on all interfaces.\r\n\r\n\r\n#security:\r\n\r\n#operationProfiling:\r\n\r\n#replication:\r\n\r\n#sharding:\r\n\r\n## Enterprise-Only Options\r\n\r\n#auditLog:\r\n\r\n#snmp:\r\n\r\n```\r\n\r\n\r\n\r\n\r\n\r\n修改之后将文件放到 /usr/local/mongodb/mongodb.conf \r\n\r\n```shell\r\nroot@smart:/usr/local/mongodb# cat /usr/local/mongodb/mongodb.conf \r\n# for documentation of all options, see:\r\n#   http://docs.mongodb.org/manual/reference/configuration-options/\r\n\r\n# where to write logging data.\r\nsystemLog:\r\n  destination: file\r\n  logAppend: true\r\n  path: /usr/local/mongodb/logs/mongodb.log\r\n\r\n# Where and how to store data.\r\nstorage:\r\n  dbPath: /usr/local/mongodb/data\r\n journal:\r\n    enabled: true\r\n#  engine:\r\n#  mmapv1:\r\n# how the process runs\r\nprocessManagement:\r\n  fork: true  # fork and run in background\r\n  pidFilePath: /usr/local/mongodb/mongod.pid  # location of pidfile\r\n\r\n# network interfaces\r\nnet:\r\n  port: 27017\r\n  bindIp: 0.0.0.0  # Listen to local interface only, comment to listen on all interfaces.\r\n```\r\n\r\n\r\n\r\n\r\n\r\n## 数据恢复\r\n\r\n将生产环境的data文件系统数据拷贝到  /usr/local/mongodb/data/ 目录下（打包此处忽略）\r\n\r\n```shell\r\ntar xf ~/sys-mongodb-data-claim-20231119.tar.gz  -C  /usr/local/mongodb/data/\r\n```\r\n\r\n然后启动，观察日志\r\n\r\n```shell\r\n/usr/local/mongodb/bin/mongod -f /usr/local/mongodb/mongodb.conf  #启动服务\r\n```\r\n\r\n![image-20231219195125057](images/image-20231219195125057.png)\r\n\r\n\r\n\r\n需要修改配置文件增加字段： directoryForIndexes: false ，因为曾经的数据是为true,现在应该是服务启动的时候默认为false .需要手动增加配置\r\n\r\n修改后：  增加以下几个字段\r\n\r\n  wiredTiger:\r\n      engineConfig:\r\n          cacheSizeGB: 1\r\n          directoryForIndexes: true    \r\n          statisticsLogDelaySecs: 0\r\n\r\n\r\n\r\n```shell\r\nroot@smart:/usr/local/mongodb# cat /usr/local/mongodb/mongodb.conf \r\n# for documentation of all options, see:\r\n#   http://docs.mongodb.org/manual/reference/configuration-options/\r\n\r\n# where to write logging data.\r\nsystemLog:\r\n  destination: file\r\n  logAppend: true\r\n  path: /usr/local/mongodb/logs/mongodb.log\r\n\r\n# Where and how to store data.\r\nstorage:\r\n  dbPath: /usr/local/mongodb/data\r\n  journal:\r\n    enabled: true\r\n#  engine:\r\n#  mmapv1:\r\n  wiredTiger:\r\n      engineConfig:\r\n          cacheSizeGB: 1\r\n          directoryForIndexes: true    \r\n          statisticsLogDelaySecs: 0\r\n# how the process runs\r\nprocessManagement:\r\n  fork: true  # fork and run in background\r\n  pidFilePath: /usr/local/mongodb/mongod.pid  # location of pidfile\r\n\r\n# network interfaces\r\nnet:\r\n  port: 27017\r\n  bindIp: 0.0.0.0  # Listen to local interface only, comment to listen on all interfaces.\r\n```\r\n\r\n\r\n\r\n重启服务\r\n\r\n```shell\r\nmongod  --shutdown  --dbpath /usr/local/mongodb/data/\r\n/usr/local/mongodb/bin/mongod -f /usr/local/mongodb/mongodb.conf\r\n\r\n```\r\n\r\n继续查看日志，继续报错： \r\n\r\n![image-20231219195545511](images/image-20231219195545511.png)\r\n\r\n\r\n\r\n这个时候提示directoryPerDB 为true, 所以我们也需要修改为true,默认看日志是false\r\n\r\n然后修改配置文件  directoryPerDB: true\r\n\r\n```shell\r\nroot@smart:/usr/local/mongodb# cat /usr/local/mongodb/mongodb.conf \r\n# for documentation of all options, see:\r\n#   http://docs.mongodb.org/manual/reference/configuration-options/\r\n\r\n# where to write logging data.\r\nsystemLog:\r\n  destination: file\r\n  logAppend: true\r\n  path: /usr/local/mongodb/logs/mongodb.log\r\n\r\n# Where and how to store data.\r\nstorage:\r\n  dbPath: /usr/local/mongodb/data\r\n  directoryPerDB: true\r\n  journal:\r\n    enabled: true\r\n```\r\n\r\n\r\n\r\n启动服务,查看日志\r\n\r\n![](images/image-20231219195858030-1702987146929.png)\r\n\r\n\r\n\r\n看起来 MongoDB 在启动时遇到了与 WiredTiger 存储引擎相关的问题。具体而言，错误消息显示了有关无法读取根页面以及日志文件可能受到加密或来自旧版本的问题的错误。 数据已经出现损坏，需要我们修复\r\n\r\n修改的方式，使用--repair\r\n\r\n![image-20231219200220493](images/image-20231219200220493.png)\r\n\r\n\r\n\r\n似乎这个报错跟前面想相同，可能需要指定配置文件尝试\r\n\r\n![image-20231219200430560](images/image-20231219200430560.png)\r\n\r\n\r\n\r\n提示报错， 不能开启journaling配置，需要注释掉配置文件中此项\r\n\r\n```shell\r\nstorage:\r\n  dbPath: /usr/local/mongodb/data\r\n  directoryPerDB: true\r\n  #journal:\r\n   # enabled: true\r\n```\r\n\r\n\r\n\r\n然后继续操作\r\n\r\n\r\n\r\n![image-20231219200633226](images/image-20231219200633226.png)\r\n\r\n\r\n\r\n根据提示，数据修复成功!\r\n\r\n\r\n\r\n\r\n\r\n## 数据导出导入\r\n\r\n数据导出：\r\n\r\n```shell\r\nmongoexport --host 127.0.0.1 --port 27017 --db sensorcmd --collection new_alarm --out new_alarm.json --jsonArray\r\n```\r\n\r\n\r\n\r\n![image-20231219200855720](images/image-20231219200855720.png)\r\n\r\n\r\n\r\n导出说明：\r\n\r\n--host：MongoDB服务器的主机名或IP地址。\r\n--port：MongoDB服务器的端口号，默认为27017。\r\n--db：要导出的数据库名称。\r\n--collection：要导出的集合名称。\r\n--out：导出数据的输出文件路径。\r\n--jsonArray：将每个文档导出为JSON数组的元素，而不是多个独立的JSON文档。\r\n\r\n\r\n\r\n数据导入到生产环境\r\n\r\n```shell\r\nmongoimport --host localhost --port 27017 --db mydb --collection users --file users.json --jsonArray\r\n```\r\n\r\n![image-20231219201205941](images/image-20231219201205941.png)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n## 问题：\r\n\r\n经过上面一番捯饬，数据都导入成功了，但是数据是还原了很少的一部分，很多的数据还是丢失了。 。所以，以上这种情景并不能还原所有的数。下面，通过第三方工具实现对数据的恢复\r\n\r\n\r\n\r\n## WT工具恢复mongod数据\r\n\r\n\r\n\r\n### WT安装\r\n\r\n```shell\r\n需要的环境： \r\n 操作系统:  centos7\r\n mongod版本: 3.2.17\r\n```\r\n\r\n\r\n\r\n依赖安装\r\n\r\n ```shell\r\n yum install -y epel-release libtool automake snappy snappy-devel lz4 lz4-devel zstd zstd-devel libzstd-devel zlib zlib-devel git make vim-common\r\n ```\r\n\r\n\r\n\r\n安装源码-需要借助其他工具\r\n\r\n```shell\r\ngit clone https://github.com/wiredtiger/wiredtiger.git\r\n```\r\n\r\n\r\n\r\n根据所使用的MongoDB版本，应该选择正确的`wt`分支。例如我当前使用的`MongoDB 3.2.17`，那么同样应该选择WiredTiger的相应tag MongoDB 3.2.17\r\n\r\n```shell\r\n[root@113 wt]# git tag | grep 3.2.17\r\nmongodb-3.2.17\r\n[root@113 wt]# git checkout tags/mongodb-3.2.17 -b v3.2.17\r\n```\r\n\r\n\r\n\r\n### 编译源码\r\n\r\n```shell\r\nsh autogen.sh\r\n./configure --disable-shared --with-builtins=lz4,snappy,zlib,zstd\r\nmake -j $(nproc)\r\nmake install\r\n```\r\n\r\n\r\n\r\n## 通过wt恢复数据\r\n\r\n\r\n\r\n启动Mongodb ，安装mongod参考 yum部署方式\r\n\r\n\r\n\r\n任意创建一个集合，我们将把数据恢复到这个集合中：\r\n\r\n\r\n\r\n![image-20231220194042182](images/image-20231220194042182.png)\r\n\r\n\r\n\r\ncollection-2-2766252704149925868 即我们要使用的目标文件名。此时应:\r\n\r\n81--1313801531657640813.wt : 我们从生产环境出现问题的wt文件中导入到现在的测试环境，然后进行修复\r\n\r\n\r\n\r\n```shell\r\nrm -f   collection-2-2766252704149925868.wt\r\nmv 81--1313801531657640813.wt  collection-2-2766252704149925868.wt\r\n\r\n```\r\n\r\n### 修复\r\n\r\n让wt帮我们修复文件(非常重要的一步)\r\n\r\n```shell\r\nsystemctl  stop mongod\r\n\r\nwt salvage file:collection-2-2766252704149925868.wt\r\nchown mongod.mongod collection-2-2766252704149925868.wt\r\n\r\nsystemctl  start mongod\r\n```\r\n\r\n\r\n\r\n验证数据没有问题后，然后导出数据\r\n\r\n```shell\r\nmongoexport --host 127.0.0.1 --port 27017 --db demo --collection restore --out new_alarm20231220out.json --jsonArray\r\n```\r\n\r\n\r\n\r\n在导入到生产环境中去\r\n\r\n```shell\r\nmongoimport --host localhost --port 27017 --db sensorcmd  --collection new_alarm --file new_alarm20231220out.json --jsonArray\r\n```\r\n\r\n![image-20231220194809118](images/image-20231220194809118.png)"},{"id":"config-docusaurus-v2","metadata":{"permalink":"/blog/config-docusaurus-v2","editUrl":"https://github.com/shouji1128955/bookshell/tree/main/blog/blog/2023/10-18-config-docusaurus-v2.md","source":"@site/blog/2023/10-18-config-docusaurus-v2.md","title":"config-docusaurus-v2","description":"A short description of this page","date":"2023-10-18T00:00:00.000Z","tags":[{"inline":true,"label":"action","permalink":"/blog/tags/action"},{"inline":true,"label":"docusaurus","permalink":"/blog/tags/docusaurus"}],"readingTime":3.985,"hasTruncateMarker":true,"authors":[{"name":"zhanglaiqiang","title":"liteshell.cn maintainer","url":"https://github.com/shouji1128955/bookshell","imageURL":"https://avatars.githubusercontent.com/u/49987752?v=4","key":"liteshell","page":null}],"frontMatter":{"title":"config-docusaurus-v2","description":"A short description of this page","keywords":["docusaurus","describing","the main topics"],"authors":"liteshell","slug":"config-docusaurus-v2","tags":["action","docusaurus"]},"unlisted":false,"prevItem":{"title":"mongodb数据库恢复","permalink":"/blog/2023/12/19/mongodb数据库恢复"},"nextItem":{"title":"github结合actions实现自动化部署","permalink":"/blog/github结合actions实现自动化部署"}},"content":"<!--truncate-->\r\n\r\n简单记录一下如何安装和使用 Docusaurus 来构建自己的博客和文档站点。\r\n\r\n> Docusaurus 的官方文档 https://docusaurus.io/zh-CN/docs\r\n\r\n\r\n## 生成新站点\r\n\r\n使用 `classic` 模板生成一个新的 Docusaurus 站点 `my-website`。\r\n\r\n运行命令后，经典模板将自动添加到您的项目中\r\n\r\n```bash npm2yarn\r\nnpm init docusaurus@latest my-website classic\r\n```\r\n\r\n进入生成的站点目录\r\n\r\n```bash\r\ncd my-website\r\n```\r\n\r\n启动并运行开发服务器:\r\n\r\n```bash npm2yarn\r\nnpm run start\r\n```\r\n\r\n打开页面 `docs/intro.md` 并编辑一些行,可以看到该站点会自动重新加载并显示最新的更改。\r\n\r\n## 配置站点\r\n\r\n\r\n基础配置\r\n\r\n```js title=\"docusaurus.config.js\"\r\nconst config = {\r\n  title: \"Inhere's Site\",\r\n  tagline: \"Inhere's site, blogs and project docs\",\r\n  url: 'https://inhere.github.io',\r\n  baseUrl: '/',\r\n  trailingSlash: false,\r\n\r\n  organizationName: 'inhere', // Usually your GitHub org/user name.\r\n  projectName: 'inhere.github.io', // Usually your repo name.\r\n  deploymentBranch: 'gh-pages',\r\n\r\n  // ...\r\n}\r\n```\r\n\r\n文档和博客配置：\r\n\r\n```js title=\"docusaurus.config.js\"\r\n  presets: [\r\n    [\r\n      'classic',\r\n      /** @type {import('@docusaurus/preset-classic').Options} */\r\n      ({\r\n        docs: {\r\n          sidebarPath: require.resolve('./sidebars.js'),\r\n          // Please change this to your repo.\r\n          // Remove this to remove the \"edit this page\" links.\r\n          editUrl: 'https://github.com/inhere/inhere.github.io/tree/main/',\r\n        },\r\n        blog: {\r\n          showReadingTime: true,\r\n          postsPerPage: 6,\r\n          // routeBasePath: '/', // 把博客放在站点根部\r\n          blogSidebarCount: 6, // 默认 5\r\n          // Remove this to remove the \"edit this page\" links.\r\n          editUrl: 'https://github.com/inhere/inhere.github.io/tree/main/',\r\n        },\r\n      }),\r\n    ],\r\n  ],\r\n```\r\n\r\n:::info\r\n\r\n完整配置请看 https://github.com/inhere/inhere.github.io/blob/main/docusaurus.config.js\r\n\r\n:::\r\n\r\n\r\n### 配置多语言\r\n\r\n```js title=\"docusaurus.config.js\"\r\ni18n: {\r\n    defaultLocale: 'zh-CN',\r\n    locales: [ \"zh-CN\", 'en'],\r\n    localeConfigs: {\r\n      en: {\r\n        htmlLang: 'en-GB',\r\n      },\r\n    },\r\n  },\r\n```\r\n\r\n\r\n这里我是以 `zh-CN` 为主，生成 `en` 翻译文档\r\n\r\n```bash\r\nnpm run write-translations -- --locale en\r\n```\r\n\r\n\r\n\r\n## GitHab Pages\r\n\r\n参考官方文档添加 GitHab Actions 如下的配置文件，这样在每次推送到仓库时就会触发自动构建，\r\n并且会自动部署构建的静态文件到 `gh-pages` 分支。\r\n\r\n```text\r\n.github/workflows/deploy.yml\r\n.github/workflows/test-deploy.yml\r\n```\r\n\r\n## 添加常用插件\r\n\r\n\r\n### npm2yarn\r\n\r\n可以同时显示 npm 和 Yarn 的 CLI 命令。\r\n然后要使用它，只需在代码块中添加 `npm2yarn` 键：\r\n\r\n\r\n```bash npm2yarn\r\nnpm install @docusaurus/remark-plugin-npm2yarn\r\n```\r\n\r\n配置插件：\r\n\r\n```js title=\"docusaurus.config.js\"\r\nmodule.exports = {\r\n  // ...\r\n  presets: [\r\n    [\r\n      '@docusaurus/preset-classic',\r\n      {\r\n        docs: {\r\n          // highlight-start\r\n          remarkPlugins: [\r\n            [require('@docusaurus/remark-plugin-npm2yarn'), {sync: true}],\r\n          ],\r\n          // highlight-end\r\n        },\r\n        pages: {\r\n          // highlight-next-line\r\n          remarkPlugins: [require('@docusaurus/remark-plugin-npm2yarn')],\r\n        },\r\n        blog: {\r\n          // ...\r\n        },\r\n      },\r\n    ],\r\n  ],\r\n};\r\n```\r\n\r\n### docusaurus-search-local\r\n\r\n\r\n用于 Docusaurus v2 的支持离线本地搜索的插件\r\n\r\n> 插件仓库 https://github.com/easyops-cn/docusaurus-search-local\r\n\r\n安装插件：\r\n\r\n```bash npm2yarn\r\nnpm install --save @easyops-cn/docusaurus-search-local\r\n```\r\n\r\n配置插件：\r\n\r\n```js title=\"docusaurus.config.js\"\r\nmodule.exports = {\r\n  // ... Your other configurations.\r\n  themes: [\r\n    // ... Your other themes.\r\n    [\r\n      // highlight-start\r\n      require.resolve(\"@easyops-cn/docusaurus-search-local\"),\r\n      {\r\n        // ... Your options.\r\n        // `hashed` is recommended as long-term-cache of index file is possible.\r\n        hashed: true,\r\n        // For Docs using Chinese, The is recommended to set to:\r\n        language: [\"en\", \"zh\"],\r\n      },\r\n      // highlight-end\r\n    ],\r\n  ],\r\n};\r\n```\r\n\r\n类似插件：\r\n\r\n- https://github.com/praveenn77/docusaurus-lunr-search\r\n- https://github.com/cmfcmf/docusaurus-search-local\r\n\r\n\r\n### openapi-docs\r\n\r\n> GitHub https://github.com/PaloAltoNetworks/docusaurus-openapi-docs\r\n\r\nInstallation\r\n\r\nPlugin:\r\n\r\n```bash\r\nyarn add docusaurus-plugin-openapi-docs\r\n```\r\n\r\nTheme:\r\n\r\n```bash\r\nyarn add docusaurus-theme-openapi-docs\r\n```\r\n\r\n## 一些使用说明\r\n\r\n一些有用的使用说明\r\n\r\n### 强调提示\r\n\r\n```markdown\r\n:::note\r\n\r\n一些包含 _Markdown_ `语法` 的 **内容**。\r\n\r\n:::\r\n\r\n:::tip\r\n\r\n一些包含 _Markdown_ `语法` 的 **内容**。\r\n\r\n:::\r\n\r\n:::info\r\n\r\n一些包含 _Markdown_ `语法` 的 **内容**。\r\n\r\n:::\r\n\r\n:::caution\r\n\r\n一些包含 _Markdown_ `语法` 的 **内容**。\r\n\r\n:::\r\n\r\n:::danger\r\n\r\n一些包含 _Markdown_ `语法` 的 **内容**。\r\n\r\n:::\r\n```\r\n\r\n效果如下：\r\n\r\n\r\n:::info\r\n\r\n一些包含 _Markdown_ `语法` 的 **内容**。\r\n\r\n:::\r\n\r\n:::caution\r\n\r\n一些包含 _Markdown_ `语法` 的 **内容**。\r\n\r\n:::\r\n\r\n\r\n### 代码行高亮\r\n\r\n你可以用 `highlight-next-line`、`highlight-start`、`highlight-end` 等注释来选择要高亮的行。\r\n\r\n效果如下：\r\n\r\n```js\r\nfunction HighlightSomeText(highlight) {\r\n  if (highlight) {\r\n    // highlight-next-line\r\n    return '这行被高亮了！';\r\n  }\r\n\r\n  return '这里不会';\r\n}\r\n\r\nfunction HighlightMoreText(highlight) {\r\n  // highlight-start\r\n  if (highlight) {\r\n    return '这块被高亮了！';\r\n  }\r\n  // highlight-end\r\n\r\n  return '这里不会';\r\n}\r\n```\r\n\r\n> 原文档 https://docusaurus.io/zh-CN/docs/markdown-features/code-blocks#line-highlighting"},{"id":"github结合actions实现自动化部署","metadata":{"permalink":"/blog/github结合actions实现自动化部署","editUrl":"https://github.com/shouji1128955/bookshell/tree/main/blog/blog/2023/10-13-github结合actions实现自动化部署.md","source":"@site/blog/2023/10-13-github结合actions实现自动化部署.md","title":"github结合actions实现自动化部署","description":"A short description of this page","date":"2023-10-13T00:00:00.000Z","tags":[{"inline":true,"label":"action","permalink":"/blog/tags/action"},{"inline":true,"label":"docusaurus","permalink":"/blog/tags/docusaurus"}],"readingTime":6.62,"hasTruncateMarker":true,"authors":[{"name":"zhanglaiqiang","title":"liteshell.cn maintainer","url":"https://github.com/shouji1128955/bookshell","imageURL":"https://avatars.githubusercontent.com/u/49987752?v=4","key":"liteshell","page":null}],"frontMatter":{"title":"github结合actions实现自动化部署","description":"A short description of this page","keywords":["docusaurus","describing","the main topics"],"authors":"liteshell","slug":"github结合actions实现自动化部署","tags":["action","docusaurus"]},"unlisted":false,"prevItem":{"title":"config-docusaurus-v2","permalink":"/blog/config-docusaurus-v2"}},"content":"<!--truncate-->\r\n\r\n##  概述\r\n\r\n\r\n  笔者之前一直在使用wordpress记录自己工作中的点点滴滴，分享自己的所感所触，但是随着日积月累，发现效率很低，对于管理自己的笔记非常不方便。因为我们有时候都是多种场景，比如，我们工作使用markdown来写作，但是写完之后需要同步到wordpress,这个需要花费很多的时间。特此，笔者通过网友介绍发现facebook旗下的docusaurus非常不错。因为它可以实现通过markdown来写作，然后一键push到github进行项目保存，然后通过github的action来实现一键部署到多种场景,如下图。\r\n \r\n![Example banner](./images/1.png)\r\n\r\n测试添加部分说明信息\r\n当然，也可以部署到自己的服务器。\r\n由于笔者自己测试后，如果部署到github中的page中，由于网络原因，访问速度很慢，尤其加载图片，如果自己买了云服务器，当然可以部署到自己的云服务器中，接下来，我就是使用这种方式来部署自己docusaurus。\r\n\r\n\r\n\r\n\r\n\r\n:::tip\r\n\r\nSome **云服务器购买方式--->  推荐购买阿里云，腾讯云的轻量级服务器，费用比较低。** \r\n\r\n:::\r\n\r\n\r\n## 1、创建action\r\n\r\n下面跟着我一步一步操作如何实现部署，废话不多说，直接上菜。\r\n\r\n首先在仓库的根目录下，创建 .github/workflows/main.yml 文件，这就是 GitHub Actions 功能的配置文件，用于告诉 GitHub 要做哪些事情，写入以下内容\r\n\r\n### 1.1 创建action文件\r\n\r\n\r\n```shell\r\n.github/workflows/main.yml\r\n\r\nname: Deploy GitHub Pages\r\n\r\n# 触发条件：在 push 到 master 分支后\r\non:\r\n  push:\r\n    branches:\r\n      - main\r\n\r\n# 任务\r\njobs:\r\n  build-and-deploy:\r\n    # 服务器环境：最新版 Ubuntu\r\n    runs-on: ubuntu-latest\r\n    steps:\r\n\r\n      # 1、拉取代码\r\n      - name: Checkout\r\n        uses: actions/checkout@v2\r\n        with:\r\n          persist-credentials: false\r\n\r\n      # 2、生成静态文件\r\n      - name: Build\r\n        run: |\r\n          npm install\r\n          npm run build\r\n                    \r\n      # 执行 ls -l 命令\r\n      - name: List files\r\n        run: ls -l  && pwd\r\n\r\n      # 3、部署到 somenzz.cn 服务器\r\n      - name: rsync deployments\r\n        uses: burnett01/rsync-deployments@4.1\r\n        with:\r\n          # 这里是 rsync 的参数 switches: -avzh --delete --exclude=\"\" --include=\"\" --filter=\"\"\r\n          switches: -avzh  --delete\r\n          path: ./build/\r\n          remote_path: /apps/liteshell/\r\n          remote_host: xxx.abc.com\r\n          remote_port: xxxx\r\n          remote_user: root\r\n          remote_key: ${{ secrets.MY_UBUNTU_RSA_PRIVATE_KEY }}\r\n```\r\n\r\n### 1.2 创建secret私钥文件\r\n\r\n创建私钥文件\r\n\r\n输入 ssh-keygen 只有一路回车\r\n```shell\r\n[root@110 ~]# ssh-keygen \r\nGenerating public/private rsa key pair.\r\nEnter file in which to save the key (/root/.ssh/id_rsa): \r\n/root/.ssh/id_rsa already exists.\r\nOverwrite (y/n)? y\r\nEnter passphrase (empty for no passphrase): \r\nEnter same passphrase again: \r\nYour identification has been saved in /root/.ssh/id_rsa.\r\nYour public key has been saved in /root/.ssh/id_rsa.pub.\r\nThe key fingerprint is:\r\nSHA256:ldbpGCcTXoR3ETFCIGM15FFRzpFmkXTOECtgg0VOtgg root@110\r\nThe key's randomart image is:\r\n+---[RSA 2048]----+\r\n|      E +*/*B+%O.|\r\n|       o.@.@.=*O |\r\n|        . %.=++ o|\r\n|         o B .   |\r\n|        S . .    |\r\n|                 |\r\n|                 |\r\n|                 |\r\n|                 |\r\n+----[SHA256]-----+\r\n[root@110 ~]# \r\n\r\n```\r\n:::danger\r\n\r\nSome **公钥和私钥必须成对，必须保存好公钥和私钥，公钥是需要放到云服务器中，私钥是需要放在github的secret中，否则会出现登录不了的情况**\r\n\r\n:::\r\n\r\n然后取出公钥\r\n\r\n```shell\r\n[root@110 ~]# cat /root/.ssh/id_rsa.pub  \r\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC2/QQTQyV0YFwbs9wTwJE9S6telGKtL9eTJVPluDQX4vEZq7u72xGLtrmug1Ax9Nxe53tOvIT8y5c5CNydBQssmrSIg57gy8L0Bnk1+J78wGKAawz0xz6ifTGET3XkAlvCesxBs/WkpVuQXcploG3jXwZJdKct7Nz8Y28Rbx0Re+Lgd+zEbqLiWUijdsjFab8mUg9k+5o2QTBU8YZQKyEwQ2etzjuE6mlh+EXepSbendVV4mNFqV/6Iuyy8ppyHkq/6MkPwewRLxm1h0w410YWWYrNJui2disx060PRYYmSAvM3sgfotgZg0wXHtART+v/VB/rmvMQW7qT/ShrEyF7 root@110\r\n```\r\n\r\n\r\n### 1.3实现对公钥上传到云服务器\r\n\r\n\r\n对于拿出来的公钥实现在服务器授权(需要部署的云服务器)\r\n\r\n1. 登录云服务器，创建如下文件\r\n\r\n```shell\r\ntouch /root/.ssh/authorized_keys\r\n\r\n然后把上面的公钥放入到下/root/.ssh/authorized_keys文件中，保存即可\r\n```\r\n\r\n2. 方式2 \r\n```shell\r\nssh-copy-id -i -P xxxx root@xxx.xx.xx.xx\r\n```\r\n\r\n\r\n\r\n## 2、github配置私钥\r\n\r\n### 2.1、创建ssh私钥环境变量\r\nMY_UBUNTU_RSA_PRIVATE_KEY： SSH私钥文件内容\r\n\r\n```shell\r\n          path: ./build/\r\n          remote_path: /apps/liteshell/\r\n          remote_host: xxx.abc.com\r\n          remote_port: xxxx\r\n          remote_user: root\r\n          remote_key: ${{ secrets.MY_UBUNTU_RSA_PRIVATE_KEY }}\r\n```\r\n\r\n需要注意的是，MY_UBUNTU_RSA_PRIVATE_KEY是服务器的s私钥文件。那具体的创建方式如下\r\n\r\n\r\n![Example banner](./images/2.png)\r\n\r\n然后按照下面的方式进行修改即可\r\n\r\n\r\n![Example banner](./images/3.png)\r\n\r\n\r\n然后生成MY_UBUNTU_RSA_PRIVATE_KEY环境变量\r\n\r\n\r\n\r\n##  3、实现部署\r\n\r\n### 3.1、创建部署目录\r\n\r\n登录云服务器创建静态站点\r\n```shell\r\nmkdir -p /apps/liteshell/\r\nmkdir -p /var/log/liteshell/\r\n\r\ndocker run -it -d  -p 28080:80  \\\r\n--name zlq-nginx-liteshell  -m 400M --memory-reservation 200M  \\\r\n--cpus=0.8 -v /apps/liteshell/:/usr/share/nginx/html/ \\\r\n-v /var/log/liteshell/:/var/log/nginx/ \\\r\n--restart=always  nginx\r\n```\r\n\r\n### 3.2、提交代码\r\n\r\n```shell\r\n$ git add --all\r\n$ git commit -m \"add article\"\r\n$ git push\r\n```\r\n 然后push到仓库\r\n 观察action变化\r\n\r\n### 3.3、查看actiong构建过程\r\n![Example banner](./images/4.png)\r\n\r\n\r\n\r\n## 最后的话\r\n\r\nGitHub 的 Actions 除了支持 push 触发，也支持 schedule 触发，这就可以玩出很多花样了，比如你可以在仓库中写一个脚本，然后编写 workflow 让 GitHub 每天定时执行，相当于免费获得了服务器的计算资源，可以参考阮一峰老师的文章GitHub Actions 教程：定时发送天气邮件 (opens new window), 对于没有服务器跑定时任务的人来说真的是一大福利。\r\n\r\n本文讲述了如何编写 workflow，让 GitHub Actions 自动化部署静态博客，可以让程序员专心的写博客，无需处理重复的部署操作，提升写作效率。在这里抛砖引玉，供各位博客大佬参考使用，不写博客，也可以修改下，变成自己的部署工作流。最后，GitHub Actions 是一个 CI/CD（持续集成/持续部署）工具，值得每一个程序员学习使用。\r\n\r\n\r\n如果要学习 GitHub Actions 来实现自己的部署流程，以下学习资源供你参考：\r\n\r\nGitHub Actions 入门教程 http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html (opens new window)。\r\n\r\nGitHub Actions 官方文档 https://docs.github.com/en/actions (opens new window)。\r\n\r\nGitHub Actions 官方插件市场https://github.com/marketplace?type=actions (opens new window)。\r\n\r\nawesome-actions https://github.com/sdras/awesome-actions (opens new window)。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n网友博客参考: \r\n```shell\r\nhttps://somenzz.gitee.io/auto-deploy-blog-by-github-actions.html#_2%E3%80%81secrets-gitee-rsa-private-key\r\n```\r\n蚂蚁大象博客\r\nhttps://blog.ljbmxsm.com/docs/others/blog-building/"}]}}